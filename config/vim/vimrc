"------------------------------------------------------------
"                           OPTIONS
"------------------------------------------------------------
set guicursor=""

set nu rnu

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set smartindent

set nowrap

set noswapfile
set nobackup
set undodir=$HOME/.local/share/vim/undodir
set undofile

set viminfofile=$HOME/.vim/viminfo

set nohlsearch
set incsearch
set smartcase

set scrolloff=8
set conceallevel=2

set nocompatible
syntax on
filetype plugin indent on


" ---------------------- File Specific --------------------

" Set spell checker
autocmd FileType tex setlocal spell

" Lisp filetype
autocmd BufEnter *.l setlocal ft=lisp


"------------------------------------------------------------
"                           REMAPS
"------------------------------------------------------------

let mapleader=" "

" I save as a fidget, so only save on upate
cnoreabbrev w update
cnoreabbrev W update
cnoreabbrev Mak mak
cnoreabbrev Mka mak
cnoreabbrev mka mak

nnoremap <leader>pv :Ex<CR>

" Escape aliases
inoremap <C-c> <Esc>
inoremap jk <Esc>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"" Center cursor after jumping half a page
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

"" Delete into void register before pasting
vnoremap <leader>p "_dP

"" Copy to system clipboard
vnoremap <leader>y "+y

nnoremap <silent> <Leader>l ml:execute 'match Search /\%'.line('.').'l/'<CR>
nnoremap <silent> <Leader>c :call clearmatches()<CR>

"" Quickfix list
nnoremap <leader>[ :copen<CR>
nnoremap <leader>] :cclose<CR>
nnoremap g[ :cprev<CR>
nnoremap g] :cnext<CR>



"------------------------------------------------------------
"                           PLUGINS
"------------------------------------------------------------

call plug#begin()

Plug 'yegappan/lsp'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'Exafunction/codeium.vim'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'tpope/vim-surround'

Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'vim-airline/vim-airline'

Plug 'vimwiki/vimwiki'
Plug 'lervag/vimtex'

call plug#end()


"------------------------------------------------------------
"                     PLUGIN CONFIGURATION
"------------------------------------------------------------

"" ------------------------ LSP -----------------------------

set completeopt-=preview

" confirm with <C-k>
inoremap <expr> <C-k> pumvisible() ? "\<C-y>" : "\<C-n>"

nnoremap K  <cmd>LspHover<CR>
nnoremap gA <cmd>LspCodeAction<CR>
nnoremap gd <cmd>LspGotoDefinition<CR>

nnoremap gR <cmd>LspRename<CR>
nnoremap ]d <cmd>LspDiag next<CR>
nnoremap [d <cmd>LspDiag prev<CR>
nnoremap gD <cmd>LspDiag show<CR>
nnoremap gs <cmd>LspDocumentSymbol<CR>
nnoremap gS <cmd>LspSymbolSearch<CR>
nnoremap gr <cmd>LspShowReferences<CR>


let lspOpts = #{
            \   autoComplete: v:false,
            \   autoHighlight: v:true,
            \   autoHighlightDiags: v:true,
            \   completionMatcher: 'fuzzy',
            \   completionMatcherValue: 1,
            \   diagSignErrorText: 'E>',
            \   diagSignHintText: 'H>',
            \   diagSignInfoText: 'I>',
            \   diagSignWarningText: 'W>',
            \   echoSignature: v:false,
            \   hideDisabledCodeActions: v:false,
            \   highlightDiagInline: v:true,
            \   completionTextEdit: v:true,
            \   diagVirtualTextAlign: 'after',
            \   diagVirtualTextWrap: 'default',
            \   outlineOnRight: v:false,
            \   outlineWinSize: 20,
            \   showSignature: v:true,
            \   ultisnipsSupport: v:true,
            \   usePopupInCodeAction: v:false,
            \   useQuickfixForLocations: v:true,
            \   bufferCompletionTimeout: 100,
            \   customCompletionKinds: v:false,
            \   completionKinds: {},
            \   filterCompletionDuplicates: v:true,
            \ }
autocmd User LspSetup call LspOptionsSet(lspOpts)


let lspServers = [#{
            \     name: 'clang',
            \     filetype: ['c', 'cpp'],
            \     path: '/usr/bin/clangd',
            \     args: ['--background-index']
            \ }]


autocmd User LspSetup call LspAddServer(lspServers)


"" ------------------------ Tools ---------------------------
" Fzf
nnoremap <leader>pf :Files<CR>
nnoremap <leader>pg :GFiles<CR>
nnoremap <leader>pp :Lines<CR>
nnoremap <leader>ps :RG<CR>

" Undo Tree
nnoremap <leader>u :UndotreeToggle<CR>

"" ---------------------- Appearance ------------------------

" Colorscheme
set background=dark
set termguicolors
colorscheme catppuccin_mocha

" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

"" ---------------------- Snippets --------------------------

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


"" ---------------------- Codeium --------------------------

let g:codeium_no_map_tab = 1

imap <script><silent><nowait><expr> <C-s> codeium#Accept()
imap <C-[>  <cmd>call codeium#CycleCompletions(1)<CR>
imap <C-]>  <cmd>call codeium#CycleCompletions(-1)<CR>
" imap <C-x>  <cmd>call codeium#Clear()<CR>


"" ------------------------ Wiki ----------------------------

let g:vimwiki_list = [{'path': '~/dox/wiki/', 
            \ 'path_html': '~/dox/wiki/html'}]


"" ------------------------ LaTex ----------------------------
let g:vimtex_compiler_latexmk = {
            \ 'executable': 'latexmk',
            \ 'options': [
            \   '-synctex=1',
            \   '-interaction=nonstopmode',
            \   '-file-line-error',
            \ ],
            \ 'out_dir': 'build',
            \ }

let g:vimtex_view_method = 'zathura'
let g:vimtex_view_general_options = '-reuse-instance -forward-search -inverse-search @tex @line @pdf'



