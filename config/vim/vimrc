"------------------------------------------------------------
"                           OPTIONS
"------------------------------------------------------------

" set block cursor
set guicursor=""

" set relative and absolute line numbers
set nu rnu

" cursor is minimum of 8 lines from the edges of the screen
set scrolloff=8
set conceallevel=2

" set tab width
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" auto indent new lines
set smartindent

" don't wrap lines
set nowrap

" persistent undo history
set noswapfile
set nobackup
set undodir=$HOME/.local/share/vim/undodir
set undofile

set viminfofile=$HOME/.local/share/vim/viminfo

" don't highlight searches
set nohlsearch
" show search matches as you type
set incsearch
" case insensitive search unless uppercase is used
set ignorecase
set smartcase

set nocompatible
syntax on
filetype plugin indent on

" Will be changed if plugins are available
colorscheme retrobox


"------------------------------------------------------------
"                           REMAPS
"------------------------------------------------------------

let mapleader=" "

" I save as a fidget, so only save on upate
cnoreabbrev w update
cnoreabbrev W update

nnoremap <leader>pv :Ex<CR>

" Escape aliases
inoremap <C-c> <Esc>
inoremap jk <Esc>

"" Center cursor after jumping half a page
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

"" Copy to system clipboard
vnoremap <leader>y "+y



"------------------------------------------------------------
"                           COMMANDS
"------------------------------------------------------------

" Run a terminal command in a vertical split
command -nargs=+ Run :vertical botright term <args>



"------------------------------------------------------------
"                           PLUGINS
"------------------------------------------------------------

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


call plug#begin()

Plug 'yegappan/lsp'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'Exafunction/codeium.vim'

Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'tpope/vim-surround'

Plug 'vimwiki/vimwiki'
Plug 'lervag/vimtex'

Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'vim-airline/vim-airline'

call plug#end()

"" ------------------------ LSP -----------------------------

set completeopt-=preview

" confirm auto-completions with <C-k>
inoremap <expr> <C-k> pumvisible() ? "\<C-y>" : "\<C-n>"

nnoremap K  <cmd>LspHover<CR>
nnoremap gA <cmd>LspCodeAction<CR>
nnoremap gd <cmd>LspGotoDefinition<CR>
nnoremap gR <cmd>LspRename<CR>
nnoremap ]d <cmd>LspDiag next<CR>
nnoremap [d <cmd>LspDiag prev<CR>
nnoremap gD <cmd>LspDiag show<CR>
nnoremap gs <cmd>LspDocumentSymbol<CR>
nnoremap gS <cmd>LspSymbolSearch<CR>
nnoremap gr <cmd>LspShowReferences<CR>


let lspOpts = #{
            \   autoComplete: v:false,
            \   autoHighlight: v:true,
            \   autoHighlightDiags: v:true,
            \   completionMatcher: 'fuzzy',
            \   completionMatcherValue: 1,
            \   diagSignErrorText: 'E>',
            \   diagSignHintText: 'H>',
            \   diagSignInfoText: 'I>',
            \   diagSignWarningText: 'W>',
            \   echoSignature: v:false,
            \   hideDisabledCodeActions: v:false,
            \   highlightDiagInline: v:true,
            \   completionTextEdit: v:true,
            \   diagVirtualTextAlign: 'after',
            \   diagVirtualTextWrap: 'default',
            \   outlineOnRight: v:false,
            \   outlineWinSize: 20,
            \   showSignature: v:true,
            \   ultisnipsSupport: v:true,
            \   usePopupInCodeAction: v:false,
            \   useQuickfixForLocations: v:true,
            \   bufferCompletionTimeout: 100,
            \   customCompletionKinds: v:false,
            \   completionKinds: {},
            \   filterCompletionDuplicates: v:true,
            \ }

autocmd User LspSetup call LspOptionsSet(lspOpts)


let clangServer = [#{
            \     name: 'clang',
            \     filetype: ['c', 'cpp'],
            \     path: '/usr/bin/clangd',
            \     args: ['--background-index']
            \ }]
autocmd User LspSetup call LspAddServer(clangServer)

let rustServer = [#{
            \     name: 'rustlang',
            \     filetype: ['rust', 'rs'],
            \     path: '/usr/bin/rust-analyzer',
            \     args: []
            \ }]
autocmd User LspSetup call LspAddServer(rustServer)


"" ------------------------ Tools ---------------------------

" Fzf
nnoremap <leader>pf :Files<CR>
nnoremap <leader>pg :GFiles<CR>
nnoremap <leader>pp :Lines<CR>

" Undo Tree
nnoremap <leader>u :UndotreeToggle<CR>

" Vimwiki
let g:vimwiki_list = [{'path': '~/dox/wiki/', 'path_html': '~/dox/wiki/html'}]

" VimTex
let g:vimtex_compiler_latexmk = { 'out_dir': 'build', 'aux_dir': 'aux', }
autocmd FileType tex setlocal spell

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Codeium
let g:codeium_enabled = v:false
let g:codeium_no_map_tab = 1
imap <script><silent><nowait><expr> <C-q> codeium#Accept()
imap <C-[>  <cmd>call codeium#CycleCompletions(1)<CR>
imap <C-]>  <cmd>call codeium#CycleCompletions(-1)<CR>
imap <C-;>  <cmd>call codeium#Clear()<CR>


"" ---------------------- Appearance ------------------------

" Colorscheme
set background=dark
set termguicolors
colorscheme catppuccin_mocha

" sometimes setting these will fix colors
" let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

